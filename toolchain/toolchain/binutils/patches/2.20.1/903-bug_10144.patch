mips/ld: non-dynamic relocations refer to dynamic symbol

http://sourceware.org/bugzilla/show_bug.cgi?id=10144

===================================================================
RCS file: /cvs/src/src/bfd/ChangeLog,v
retrieving revision 1.5179
retrieving revision 1.5180
diff -u -r1.5179 -r1.5180
--- src/bfd/ChangeLog	2010/11/04 16:17:42	1.5179
+++ src/bfd/ChangeLog	2010/11/04 18:00:51	1.5180
@@ -1,3 +1,10 @@
+2010-11-04  Maciej W. Rozycki  <macro@codesourcery.com>
+
+	PR ld/10144
+	* elfxx-mips.c (_bfd_mips_elf_check_relocs)
+	[R_MIPS_32, R_MIPS_REL32, R_MIPS_64]: Ignore relocs from
+	SEC_DEBUGGING sections.
+
 2010-10-29  Nick Clifton  <nickc@redhat.com>
 
 	PR bintils/6962
===================================================================
RCS file: /cvs/src/src/bfd/elfxx-mips.c,v
retrieving revision 1.278
retrieving revision 1.279
diff -u -r1.278 -r1.279
--- src/bfd/elfxx-mips.c	2010/10/29 21:28:31	1.278
+++ src/bfd/elfxx-mips.c	2010/11/04 18:00:54	1.279
@@ -7583,6 +7583,25 @@
 		elf_hash_table (info)->dynobj = dynobj = abfd;
 	      break;
 	    }
+	  /* For sections that are not SEC_ALLOC a copy reloc would be
+	     output if possible (implying questionable semantics for
+	     read-only data objects) or otherwise the final link would
+	     fail as ld.so will not process them and could not therefore
+	     handle any outstanding dynamic relocations.
+
+	     For such sections that are also SEC_DEBUGGING, we can avoid
+	     these problems by simply ignoring any relocs as these
+	     sections have a predefined use and we know it is safe to do
+	     so.
+
+	     This is needed in cases such as a global symbol definition
+	     in a shared library causing a common symbol from an object
+	     file to be converted to an undefined reference.  If that
+	     happens, then all the relocations against this symbol from
+	     SEC_DEBUGGING sections in the object file will resolve to
+	     nil.  */
+	  if ((sec->flags & SEC_DEBUGGING) != 0)
+	    break;
 	  /* Fall through.  */
 
 	default:
-- 
