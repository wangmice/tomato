[4.5 Regression] cancel_loop_tree: bad read causes ice

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=42229

--- trunk/gcc/ChangeLog	2009/12/02 14:49:11	154913
+++ trunk/gcc/ChangeLog	2009/12/02 15:22:01	154914
@@ -1,3 +1,11 @@
+2011-04-21  Richard Guenther  <rguenther@suse.de>
+	Backported from mainline
+	2009-12-02  Richard Guenther  <rguenther@suse.de>
+
+	PR middle-end/42229
+	* cfgloopmanip.c (remove_path): Avoid cancelling loops
+	twice.
+
 2011-02-26  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>
 
 	Backport from mainline:
--- trunk/gcc/cfgloopmanip.c	2009/12/02 14:49:11	154913
+++ trunk/gcc/cfgloopmanip.c	2009/12/02 15:22:01	154914
@@ -278,10 +278,9 @@ remove_path (edge e)
   edge ae;
   basic_block *rem_bbs, *bord_bbs, from, bb;
   VEC (basic_block, heap) *dom_bbs;
-  int i, nrem, n_bord_bbs, nreml;
+  int i, nrem, n_bord_bbs;
   sbitmap seen;
   bool irred_invalidated = false;
-  struct loop **deleted_loop;
 
   if (!can_remove_branch_p (e))
     return false;
@@ -342,19 +341,13 @@ remove_path (edge e)
   dom_bbs = NULL;
 
   /* Cancel loops contained in the path.  */
-  deleted_loop = XNEWVEC (struct loop *, nrem);
-  nreml = 0;
   for (i = 0; i < nrem; i++)
     if (rem_bbs[i]->loop_father->header == rem_bbs[i])
-      deleted_loop[nreml++] = rem_bbs[i]->loop_father;
-
-  remove_bbs (rem_bbs, nrem);
-  free (rem_bbs);
-
-  for (i = 0; i < nreml; i++)
-    cancel_loop_tree (deleted_loop[i]);
-  free (deleted_loop);
+      cancel_loop_tree (rem_bbs[i]->loop_father);
 
+  remove_bbs (rem_bbs, nrem);
+  free (rem_bbs);
+
   /* Find blocks whose dominators may be affected.  */
   sbitmap_zero (seen);
   for (i = 0; i < n_bord_bbs; i++)
