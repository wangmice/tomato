[4.3/4.4 regression] Rejects valid with pointer-to-member in template

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48594

--- gcc-4_4-branch/gcc/cp/ChangeLog	2011/04/21 02:56:39	172803
+++ gcc-4_4-branch/gcc/cp/ChangeLog	2011/04/21 02:57:28	172804
@@ -1,3 +1,9 @@
+2011-04-20  Jason Merrill  <jason@redhat.com>
+
+	PR c++/48594
+	* decl2.c (build_offset_ref_call_from_tree): Fix calling a functor
+	or pointer to (non-member) function.
+
 2011-03-08  Jason Merrill  <jason@redhat.com>
 
 	PR c++/45651
--- gcc-4_4-branch/gcc/cp/call.c	2011/04/21 02:56:39	172803
+++ gcc-4_4-branch/gcc/cp/call.c	2011/04/21 02:57:28	172804
@@ -145,7 +145,6 @@
 			       bool);
 static void op_error (enum tree_code, enum tree_code, tree, tree,
 		      tree, const char *);
-static tree build_object_call (tree, tree);
 static tree resolve_args (tree);
 static struct z_candidate *build_user_type_conversion_1 (tree, tree, int);
 static void print_z_candidate (const char *, struct z_candidate *);
@@ -3194,7 +3193,7 @@
    return build_over_call (cand, LOOKUP_NORMAL);
 }
 
-static tree
+tree
 build_object_call (tree obj, tree args)
 {
   struct z_candidate *candidates = 0, *cand;
--- gcc-4_4-branch/gcc/cp/cp-tree.h	2011/04/21 02:56:39	172803
+++ gcc-4_4-branch/gcc/cp/cp-tree.h	2011/04/21 02:57:28	172804
@@ -4193,6 +4193,7 @@
 extern tree build_new_function_call		(tree, tree, bool);
 extern tree build_operator_new_call		(tree, tree, tree *, tree *,
 						 tree *);
+extern tree build_object_call			(tree, tree);
 extern tree build_new_method_call		(tree, tree, tree, tree, int,
 						 tree *);
 extern tree build_special_member_call		(tree, tree, tree, tree, int);
--- gcc-4_4-branch/gcc/cp/decl2.c	2011/04/21 02:56:39	172803
+++ gcc-4_4-branch/gcc/cp/decl2.c	2011/04/21 02:57:28	172804
@@ -3725,9 +3725,12 @@
 	 because we depend on the form of FN.  */
       args = build_non_dependent_args (args);
       object = build_non_dependent_expr (object);
-      if (TREE_CODE (fn) == DOTSTAR_EXPR)
-	object = build_unary_op (ADDR_EXPR, object, 0);
-      args = tree_cons (NULL_TREE, object, args);
+      if (TREE_CODE (TREE_TYPE (fn)) == METHOD_TYPE)
+	{
+	  if (TREE_CODE (fn) == DOTSTAR_EXPR)
+	    object = build_unary_op (ADDR_EXPR, object, 0);
+	  args = tree_cons (NULL_TREE, object, args);
+	}
       /* Now that the arguments are done, transform FN.  */
       fn = build_non_dependent_expr (fn);
     }
@@ -3747,7 +3750,10 @@
       args = tree_cons (NULL_TREE, object_addr, args);
     }
 
-  expr = build_function_call (fn, args);
+  if (CLASS_TYPE_P (TREE_TYPE (fn)))
+    expr = build_object_call (fn, args);
+  else
+    expr = build_function_call (fn, args);
   if (processing_template_decl && expr != error_mark_node)
     return build_min_non_dep_call_list (expr, orig_fn, orig_args);
   return expr;
--- gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/04/21 02:56:39	172803
+++ gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/04/21 02:57:28	172804
@@ -1,3 +1,7 @@
+2011-04-20  Jason Merrill  <jason@redhat.com>
+
+	* g++.dg/template/operator11.C: New.
+
 2011-03-08  Jason Merrill  <jason@redhat.com>
 
 	* g++.dg/template/anon5.C: New.
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/g++.dg/template/operator11.C	2011/04/21 02:57:28	172804
@@ -0,0 +1,25 @@
+// PR c++/48594
+// Test for uses of (X->*Y)() that don't actually involve a
+// pointer to member function.
+
+struct A { } a;
+struct B { } b;
+struct C * cp;
+
+struct Func { void operator()(); };
+Func operator->* (A, int);
+
+typedef void (*pfn)();
+pfn operator->* (B, int);
+
+pfn C::*cpfn;
+Func C::*cfunc;
+
+template <class T>
+void f()
+{
+  (a->*1)();
+  (b->*1)();
+  (cp->*cpfn)();
+  (cp->*cfunc)();
+}
