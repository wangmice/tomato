[4.4/4.5/4.6/4.7 Regression] The prevention of ADL with the help of parentheses doesn't work

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=42687

--- gcc-4_4-branch/gcc/cp/ChangeLog	2011/04/27 05:20:06	173008
+++ gcc-4_4-branch/gcc/cp/ChangeLog	2011/04/27 05:20:33	173009
@@ -1,3 +1,9 @@
+2011-04-26  Jason Merrill  <jason@redhat.com>
+
+	PR c++/42687
+	* parser.c (cp_parser_primary_expression): Set *idk to
+	CP_ID_KIND_NONE for a parenthesized identifier.
+
 2011-04-20  Jason Merrill  <jason@redhat.com>
 
 	PR c++/48594
--- gcc-4_4-branch/gcc/cp/parser.c	2011/04/27 05:20:06	173008
+++ gcc-4_4-branch/gcc/cp/parser.c	2011/04/27 05:20:33	173009
@@ -3274,6 +3274,12 @@
 	       `&A::B' might be a pointer-to-member, but `&(A::B)' is
 	       not.  */
 	    finish_parenthesized_expr (expr);
+	    /* DR 705: Wrapping an unqualified name in parentheses
+	       suppresses arg-dependent lookup.  We want to pass back
+	       CP_ID_KIND_QUALIFIED for suppressing vtable lookup
+	       (c++/37862), but none of the others.  */
+	    if (*idk != CP_ID_KIND_QUALIFIED)
+	      *idk = CP_ID_KIND_NONE;
 	  }
 	/* The `>' token might be the end of a template-id or
 	   template-parameter-list now.  */
--- gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/04/27 05:20:06	173008
+++ gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/04/27 05:20:33	173009
@@ -1,3 +1,7 @@
+2011-04-26  Jason Merrill  <jason@redhat.com>
+
+	* g++.dg/lookup/koenig13.C: New.
+
 2011-04-20  Jason Merrill  <jason@redhat.com>
 
 	PR c++/48594
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/g++.dg/lookup/koenig13.C	2011/04/27 05:20:33	173009
@@ -0,0 +1,16 @@
+// PR c++/42687
+// DR 705
+
+namespace N
+{
+    struct S { };
+    void f(const S &) { }
+}
+
+void f(const N::S &) { }
+
+int main()
+{
+    N::S v;
+    (f)(v); // no ambiguity: ADL is prevented with (), only ::f is considered
+}
