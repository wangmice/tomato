[C++0x][noexcept] Placement-new problem with deleted destructors

 http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48873

--- gcc-4_4-branch/gcc/cp/ChangeLog	2011/05/20 19:57:52	173977
+++ gcc-4_4-branch/gcc/cp/ChangeLog	2011/05/20 20:01:19	173978
@@ -1,3 +1,8 @@
+2011-05-20  Jason Merrill  <jason@redhat.com>
+
+	PR c++/48873
+	* tree.c (stabilize_expr): Don't make gratuitous copies of classes.
+
 2011-05-09  Jason Merrill  <jason@redhat.com>
 
 	PR c++/48936
--- gcc-4_4-branch/gcc/cp/tree.c	2011/05/20 19:57:52	173977
+++ gcc-4_4-branch/gcc/cp/tree.c	2011/05/20 20:01:19	173978
@@ -2663,7 +2663,8 @@
   if (!TREE_SIDE_EFFECTS (exp))
     init_expr = NULL_TREE;
   else if (!real_lvalue_p (exp)
-	   || !TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (exp)))
+	   || (!TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (exp))
+	       && !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (exp))))
     {
       init_expr = get_target_expr (exp);
       exp = TARGET_EXPR_SLOT (init_expr);
--- gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/05/20 19:57:52	173977
+++ gcc-4_4-branch/gcc/testsuite/ChangeLog	2011/05/20 20:01:19	173978
@@ -1,3 +1,7 @@
+2011-05-20  Jason Merrill  <jason@redhat.com>
+
+	* g++.dg/init/new32.C: New.
+
 2011-05-10  Jakub Jelinek  <jakub@redhat.com>
 
 	Backported from mainline
--- /dev/null
+++ gcc-4_4-branch/gcc/testsuite/g++.dg/init/new32.C	2011-05-21 22:13:08.000000000 +0400
@@ -0,0 +1,16 @@
+// PR c++/48873
+
+#include <new>
+
+struct D {
+private:
+  ~D();
+};
+
+template<class T>
+T& create();
+
+void f()
+{
+  D* dp = new (((void*) 0)) D(create<D>()); // #
+}
