libc: remove some weak __pthreads_* wrappers

 Parts of upstream:
 0eadd98d30c51d26fde4062e6b8c48f3c9b5148d libc: remove libc weak __pthreads_* wrappers
 279c728ee62e53eb055227695bc6fafb31a3a5f1 nptl: fix libc internal, dynamically enabled locking
 0748262682e3cffc7fccc266ac7632f48f56a0ee fix a few build errors for the no threads case
---

diff --git a/libc/misc/dirent/opendir.c b/libc/misc/dirent/opendir.c
--- a/libc/misc/dirent/opendir.c
+++ b/libc/misc/dirent/opendir.c
@@ -35,7 +35,7 @@ DIR *opendir(const char *name)
 		__set_errno(ENOMEM);
 		return NULL;
 	}
-	__pthread_mutex_init(&(ptr->dd_lock), NULL);
+	__UCLIBC_MUTEX_INIT_VAR(ptr->dd_lock);
 	return ptr;
 }
 libc_hidden_def(opendir)
diff --git a/libc/misc/pthread/Makefile.in b/libc/misc/pthread/Makefile.in
index 504aa25..2f436ac 100644
--- a/libc/misc/pthread/Makefile.in
+++ b/libc/misc/pthread/Makefile.in
@@ -11,7 +11,6 @@ MISC_PTHREAD_DIR := $(top_srcdir)libc/misc/pthread
 MISC_PTHREAD_DIR := $(top_srcdir)libc/misc/pthread
 MISC_PTHREAD_OUT := $(top_builddir)libc/misc/pthread
 
-libc-$(UCLIBC_HAS_THREADS) += $(MISC_PTHREAD_OUT)/unlock.o
 libc-$(UCLIBC_HAS_THREADS) += $(MISC_PTHREAD_OUT)/weaks.o
 
 objclean-y += misc_pthread_clean
diff --git a/libc/misc/pthread/unlock.c b/libc/misc/pthread/unlock.c
deleted file mode 100644
index 04de0df..0000000
--- a/libc/misc/pthread/unlock.c
+++ b/dev/null
@@ -1,27 +0,0 @@
-/* The weak pthread functions for Linux.
-   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Library General Public License as
-   published by the Free Software Foundation; either version 2 of the
-   License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Library General Public License for more details.
-
-   You should have received a copy of the GNU Library General Public
-   License along with the GNU C Library; see the file COPYING.LIB.  If not,
-   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
-   Boston, MA 02111-1307, USA.  */
-
-#include <pthread.h>
-#include <bits/uClibc_mutex.h>
-
-void attribute_hidden __uclibc_mutex_unlock (void *arg)
-{
-	pthread_mutex_t *__mutex = (pthread_mutex_t *)arg;
-	__pthread_mutex_unlock(__mutex);
-}
diff --git a/libc/sysdeps/linux/common/bits/uClibc_mutex.h b/libc/sysdeps/linux/common/bits/uClibc_mutex.h
--- a/libc/sysdeps/linux/common/bits/uClibc_mutex.h
+++ b/libc/sysdeps/linux/common/bits/uClibc_mutex.h
@@ -22,6 +22,9 @@
 #define __UCLIBC_MUTEX_STATIC(M,I)			static pthread_mutex_t M = I
 #define __UCLIBC_MUTEX_EXTERN(M)			extern pthread_mutex_t M
 
+#define __UCLIBC_MUTEX_INIT_VAR(M)								\
+		((M) = (pthread_mutex_t) PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP)
+
 #define __UCLIBC_MUTEX_LOCK_CANCEL_UNSAFE(M)								\
 		__pthread_mutex_lock(&(M))
 
@@ -34,7 +37,8 @@
 #define __UCLIBC_MUTEX_CONDITIONAL_LOCK(M,C)								\
 	do {												\
 		struct _pthread_cleanup_buffer __infunc_pthread_cleanup_buffer;				\
-		if (C) {										\
+		int __infunc_need_locking = (C);							\
+		if (__infunc_need_locking) {								\
 			_pthread_cleanup_push_defer(&__infunc_pthread_cleanup_buffer,			\
 					   (void (*) (void *))__pthread_mutex_unlock,			\
 										&(M));			\
@@ -43,7 +47,7 @@
 		((void)0)
 
 #define __UCLIBC_MUTEX_CONDITIONAL_UNLOCK(M,C)								\
-		if (C) {										\
+		if (__infunc_need_locking) {								\
 			_pthread_cleanup_pop_restore(&__infunc_pthread_cleanup_buffer,1);		\
 		}											\
 	} while (0)
@@ -69,6 +73,7 @@
 #define __UCLIBC_MUTEX_STATIC(M,I)			extern void *__UCLIBC_MUTEX_DUMMY_ ## M
 #define __UCLIBC_MUTEX_EXTERN(M)			extern void *__UCLIBC_MUTEX_DUMMY_ ## M
 
+#define __UCLIBC_MUTEX_INIT_VAR(M)			((void)0)
 #define __UCLIBC_MUTEX_LOCK_CANCEL_UNSAFE(M)		((void)0)
 #define __UCLIBC_MUTEX_UNLOCK_CANCEL_UNSAFE(M)		((void)0)
 #define __UCLIBC_MUTEX_TRYLOCK_CANCEL_UNSAFE(M)		(0)	/* Always succeed? */
diff --git a/libc/sysdeps/linux/common/bits/uClibc_pthread.h b/libc/sysdeps/linux/common/bits/uClibc_pthread.h
index 1d6209f..15aa1de 100644
--- a/libc/sysdeps/linux/common/bits/uClibc_pthread.h
+++ b/libc/sysdeps/linux/common/bits/uClibc_pthread.h
@@ -28,6 +28,9 @@
 #endif
 
 #if defined _LIBC && (defined IS_IN_libc || defined NOT_IN_libc)
+
+struct _pthread_cleanup_buffer;
+
 /* Threading functions internal to uClibc.  Make these thread functions
  * weak so that we can elide them from single-threaded processes.  */
 extern int weak_function __pthread_mutex_init (pthread_mutex_t *__mutex,
@@ -35,16 +38,14 @@ extern int weak_function __pthread_mutex_init (pthread_mutex_t *__mutex,
 extern int weak_function __pthread_mutex_destroy (pthread_mutex_t *__mutex);
 extern int weak_function __pthread_mutex_lock (pthread_mutex_t *__mutex);
 extern int weak_function __pthread_mutex_unlock (pthread_mutex_t *__mutex);
-extern void __uclibc_mutex_unlock (void *) attribute_hidden;
 extern int weak_function __pthread_mutex_trylock (pthread_mutex_t *__mutex);
-# ifndef __UCLIBC_HAS_THREADS_NATIVE__
 extern void weak_function _pthread_cleanup_push_defer (
 		struct _pthread_cleanup_buffer *__buffer,
 		void (*__routine) (void *), void *__arg);
 extern void weak_function _pthread_cleanup_pop_restore (
 		struct _pthread_cleanup_buffer *__buffer,
 		int __execute);
-# endif
+
 #endif
 
 #endif
--
cgit v0.8.2.1
